// Authors
// Robert Stuart: 1433560
// Jean Lucas Ferreira: 1152120

SEMAPHORE(I=0) = SEMAPHORE[I],
SEMAPHORE[ b : 0..1 ] = 
	( when b == 0 up -> SEMAPHORE[1]
	| when b == 1 down -> SEMAPHORE[0] 
	).

||PAPER = ( paper:SEMAPHORE(0) )
	/{ { horacio.paper.down, edgar.paper.down }/paper.down, 
	agatha.paper.up/paper.up }.

||TOBACCO = ( tobacco:SEMAPHORE(0) )
	/{ { arthur.tobacco.down, edgar.tobacco.down }/tobacco.down, 
	agatha.tobacco.up/tobacco.up }.

||SPARK = ( spark:SEMAPHORE(0) )
	/{ { horacio.spark.down, arthur.spark.down }/spark.down, 
	agatha.spark.up/spark.up }.

||RESOURCES = (  PAPER || TOBACCO || SPARK ).


//keeping track in the value of t
COUNTER = COUNTER[0],
COUNTER[t:0..6] = 
	( agatha.paper.up -> COUNTER[t+1]
	| agatha.spark.up -> COUNTER[t+2]
	| agatha.tobacco.up -> COUNTER[t+4]
	| when (t > 0) s[t].up -> COUNTER[t]
	| s[3].down -> ( s[1].down -> COUNTER[0] | s[2].down -> COUNTER[0])
	| s[5].down -> ( s[1].down -> COUNTER[0] | s[4].down -> COUNTER[0])
	| s[6].down -> ( s[2].down -> COUNTER[0] | s[4].down -> COUNTER[0])
	).


// Semaphore array
||Sarray = (forall[i:1..6] s[i]:SEMAPHORE(0)).



AGATHA = 
	( agatha.selects ->  agatha.paper.up -> agatha.spark.up ->  AGATHA
	| agatha.selects ->  agatha.spark.up -> agatha.tobacco.up -> AGATHA
	| agatha.selects ->  agatha.tobacco.up -> agatha.paper.up -> AGATHA
	).

HORACIO =
	( s[3].down ->
	  horacio.paper.down ->	
	  horacio.spark.down ->
	  horacio.smokes ->
	  horacio.stubs.out -> HORACIO
	).

ARTHUR =
	( s[6].down ->
	  arthur.spark.down ->
	  arthur.tobacco.down ->
	  arthur.smokes ->
	  arthur.stubs.out -> ARTHUR
	).

EDGAR =
	( s[5].down ->
	  edgar.tobacco.down ->
	  edgar.paper.down ->
	  edgar.smokes ->
	  edgar.stubs.out -> EDGAR 
	).

||SMOKERS =	( HORACIO || ARTHUR || EDGAR ).

||CONSTRAINTS = ( agatha.select:SEMAPHORE(1) )
		/{ agatha.selects/agatha.select.down,
	 	{ horacio, arthur, edgar }.stubs.out/agatha.select.up}.
	 				 

||MYSTERY_WRITERS = (  RESOURCES || AGATHA || COUNTER || SMOKERS || CONSTRAINTS || Sarray)
		    <<{s[1].up,s[2].up,s[3].up,s[4].up,s[5].up,s[6].up}.


//Asserting every smokers can smoke infinetely many times
progress EDGAR_P = { edgar.smokes}
progress ARTHUR_P = { arthur.smokes}
progress HORACIO_P = { horacio.smokes}

